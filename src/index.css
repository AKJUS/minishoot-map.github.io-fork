html {
    box-sizing: border-box;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: stretch;
    font-family: "Open Sans", sans-serif;
}
body {
    flex-grow: 1;
}
/*
    note: for some reason, the canvas keeps expanding infinitely
    when inside `display: grid` element. Because .canvas-cont size is always
    bigger than canvas size by 4 pixels (how, firefox?). So scrap that, just
    use `position: absolute` to not interfere with the parent
*/
.canvas-cont {
    position: relative;
    width: 100%;
    height: 100%;
}
#glCanvas {
    position: absolute;
    width: 100%;
    height: 100%;
}
.props {
    display: flex;
    flex-direction: column;
}
.components {
    display: flex;
    flex-direction: column;
    row-gap: 0.2rem;
}
.component {
    padding: 0.3rem 0.6rem;
    border-radius: 0.4rem;
    background: #00000010;
}
.component > :not(summary) {
    padding-left: 1rem;
}
.component > :not(summary):not(:empty) {
    margin-top: 0.2rem;
}
.component > summary {
    cursor: pointer;
    font-weight: 450;
}
.object-buttons {
	width: 100%;
    display: flex;
    gap: 0.3rem;
    flex-wrap: wrap;
    & > * {
        flex: 1 0 5rem;
        cursor: pointer;
        display: grid;
        & > * {
            grid-row: 1;
            grid-column: 1;
            border: none;
            border-radius: 0.4rem;
            padding: 0.5rem 0.6rem;
        }
        & > button {
            background: #00000010;
            transition: background 0.2s;
        }
        & > .overlay {
            pointer-events: none;
            animation-duration: 0.6s;
            animation-timing-function: cubic-bezier(.39,.58,.57,1);
        }
        &:hover > button {
            background: #00000030;
        }
    }
}
.space {
    margin-top: 0.6rem;
}

.prop0 {
    margin-left: 1rem;
}
.prop {
    display: flex;
    justify-content: stretch;
    flex-wrap: wrap;
    column-gap: 0.5rem;
}
.prop > :nth-child(1) {
    margin-left: -1rem;
}
.prop-name {
    font-weight: 550;
}
.empty-component {
    color: #606060;
}
.nearby {
    display: flex;
    flex-direction: column;
    row-gap: 0.1rem;
}
.hanging {
    text-indent: -1rem;
    padding-left: 1rem;
}

#side-menu {
    display: flex;
    overflow: scroll;
    flex-direction: column;
    padding-left: 0.2rem;
    padding-right: 0.2rem;
}

.menu-type {
    display: flex;
    column-gap: 1px;
    background: gray;
}

.menu-type > * {
    flex: 1 1 0;
    text-align: center;
    padding: 0.5rem;
    background: white;
    cursor: pointer;

    transition: background 0.2s;
    &:hover {
        /* sic: seleted item is not highlighed on hover */
        background: #e4e4e4;
    }
}

.container {
    display: grid;
    width: 100%;
    height: 100%;
    gap: 0.75rem;
}

.menu-type > label > input {
    display: none;
}

@media (orientation: portrait) {
    .container {
        grid-template-columns: auto;
        grid-template-rows: auto 1fr;
    }
    #tabs { grid-row: 1; }
    .canvas-cont { grid-row: 2; }
    #side-menu { grid-row: 2; }

    .container:has(input[value="0"]:checked) {
        & label:has(> input[value="0"]) {
            background: lightgray;
        }

        & > #side-menu {
            display: none;
        }
    }

    .container:has(input[value="1"]:checked) {
        & label:has(> input[value="1"]) {
            background: lightgray;
        }
        & .filter-menu {
            display: none;
        }
        & > .canvas-cont {
            display: none;
        }
    }

    .container:has(input[value="2"]:checked) {
        & label:has(> input[value="2"]) {
            background: lightgray;
        }
        & .object-menu {
            display: none;
        }
        & > .canvas-cont {
            display: none;
        }
    }
}

@media not (orientation: portrait) {
    .container {
        grid-template-columns: auto 20rem;
        grid-template-rows: auto 1fr;
    }
    .canvas-cont { grid-row: 1 / span 2; }
    .map-button { display: none; }
    .menu-type { padding-bottom: 1px; }

    .container:has(input[value="1"]:checked),
    .container:has(input[value="0"]:checked) {
        & label:has(> input[value="1"]) {
            background: lightgray;
        }
        & .filter-menu {
            display: none;
        }
    }

    .container:has(input[value="2"]:checked) {
        & label:has(> input[value="2"]) {
            background: lightgray;
        }
        & .object-menu {
            display: none;
        }
    }
}

.filter {
    display: flex;
    column-gap: 0.5rem;
    margin-left: 1rem;
}
.filter > *:nth-child(1) {
    margin-left: -1rem;
}
.filter.inline {
    justify-content: stretch;
    flex-wrap: wrap;
}
.filter.newline {
    flex-direction: column;
    justify-content: stretch;
}

.filter-list {
    display: flex;
    flex-direction: column;
}
